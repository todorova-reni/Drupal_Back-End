<?php


/*
 * Implements hook_menu()
 */
function latest_content_menu(){
  $items['latest-content-page'] = array(
    'title' => t('Latest Content Page'),
    'page callback' => 'latest_content_page',    
    'access arguments' => array('administer latest content config'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/content/latest-content-config'] = array(
    'title' => t('Latest Content Config Page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('latest_content_admin_settings'),
    'access arguments' => array('administer latest content config'),
    'file' => 'latest_content.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

function latest_content_page(){
  $block = module_invoke('latest_content', 'block_view','latest_unpublished_nodes');
  $output = render($block['content']);
  return $output;
}
/*
 * Implements hook_permission()
 * Makes form accesible only for users with permission "administer latest content config"
 */
function latest_content_permission() {
  return array(
    'administer latest content config' => array(
      'title' => t('Administer latest content config'),
      'description' => t('Perform administration tasks for my latest content module.'),
    ),
  );
}

/*
 * Implements hook_help().
 * Provides further help information about the Latest Content module
 */
function latest_content_help($path, $arg) {
  switch ($path) {
    case 'admin/config/content/latest-content-config':
      return '<p><b>' . t('Configuration page help text: You should have permission "administer latest content config" to manage this page. ') . '</b></p>';

    case 'admin/help#latest_content':
      $output = '';
      $output .= '<p>' . t('We have a help text for Latest content module. '
                       . 'You should have permission "administer latest content config" '
                       . 'to manage this page. ') . '</p>';
      return $output;
  }
}

/*
 * Implements hook_block_info().
 */
function latest_content_block_info(){
  $blocks['latest_unpublished_nodes'] = array(
    'info' => t('Unpublished nodes'),
    'status' => TRUE,
    'region' => 'sidebar_first', 
    'visibility' => 0,
  );  
  return $blocks;
}

/*
 * Implements hook_block_configure().
 */
function latest_content_block_configure($delta){
  $form = array();
  switch ($delta){
    case 'latest_unpublished_nodes' :
      $form['latest_unpublished_nodes_count'] = array(
        '#type' => 'textfield',
        '#element_validate' => array('element_validate_number'),
        '#title' => t('Configure Number of Unpublished Nodes to Display'),
        '#size' => 5,
        '#description' => t('Enter the number of unpublished nodes that will appear in the block.'),
        '#default_value' => variable_get('latest_unpublished_nodes_count', variable_get('latest_content_default_count',10))
      );
      break;
  }
  return $form;
}

/*
 * Implements hook_block_save().
 */
function latest_content_block_save($delta = '', $edit = array()){
  switch ($delta){
    case 'latest_unpublished_nodes':
      variable_set('latest_unpublished_nodes_count', (int)$edit['latest_unpublished_nodes_count']);
      break;
  }
  return;
}

/*
 * Implements hook_block_view().
 */
function latest_content_block_view($delta = ''){
  switch ($delta){
    case 'latest_unpublished_nodes':
      $block['subject'] = t('Latest unpulished nodes');
      $block['content'] = latest_content_block_contents($delta);
      return $block;
      break;
  }
} 

/*
 * A module-defined block content function
 */
function latest_content_block_contents($delta){
  switch ($delta){
    case 'latest_unpublished_nodes':
      if(user_access('administer nodes')){
        $nbr_nodes = variable_get('latest_unpublished_nodes_count', variable_get('latest_content_default_count',10));
        //$result = db_query_range('SELECT nid, title FROM {node} WHERE status = 0 ORDER BY created DESC',0,$nbr_nodes);
        $query = db_select('node', 'n')
            ->fields('n', array('nid', 'title'))
            ->orderBy('created', 'DESC')
            ->condition('status', 0)
            ->range(0, $nbr_nodes);
        $result = $query->execute();
        $items = array();
        foreach ($result as $row){
          $items[] = l($row->title, 'node/' . $row->nid . '/edit');
        }
        
        return array('#markup' => theme('item_list', array('items' => $items)));
      }
      break;
  }
}

/*
 * Implements hook_theme().
 */
function latest_content_theme($existing, $type, $theme, $path) {
  return array (
    'block__latest_content__latest_unpublished_nodes' => array (
      'template' => 'block--latest-content--latest-unpublished-nodes' ,
      'base hook' => 'block',
      'path' => drupal_get_path('module', 'latest_content'). '/templates',
    ),
  );
}


